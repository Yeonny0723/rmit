# booking_gui.py

# ########
# Packages
# ########
import tkinter as tk
from tkinter import messagebox
import tkinter.ttk as ttk # for combobox
from tkinter.messagebox import showinfo
from tkinter.messagebox import askyesno
from datetime import datetime

from booking_dao import BookingDAO # To communicate with booking table
from validation import Validation

# #################
# BookingGUI Class
# #################

class BookingGUI():
    """BookingGUI class to implement CRUD functionalities & methods to manage the user interface"""

    def __init__(self):   
        """Initialiser"""
    
        # Instantiate a data access object 
        # Contains methods to access the database
        self.booking_dao = BookingDAO()

        # Instantiate a validation object
        # Contains methods to validate input fields
        self.validator = Validation()

        # Form fields
        # Instantiate stringvars - hold  data entered in  fields of form
        self.booking_id = tk.StringVar()
        self.check_in = tk.StringVar()
        self.check_out = tk.StringVar()
        self.extra_bed = tk.IntVar()
        self.adult_num = tk.IntVar()
        self.child_num = tk.IntVar()
        self.infant_num = tk.IntVar()
        self.total_price = tk.DoubleVar()
        self.booking_dtm = tk.StringVar()
        self.room_id = tk.StringVar()
        self.staff_id = tk.StringVar()
        self.customer_id = tk.StringVar()
        self.phone_num = tk.StringVar()

        # List of Booking ids - lb for listbox
        self.lb_ids = None

        # search
        self.search_booking = None
        # search list
        self.ln_ids = None

        # Messagebox title
        self.mb_title_bar = "Booking CRUD"

    def create_gui(self, root):
        """
        Create a high level frame which contains the entire GUI 
        (of this part of the application) and adds it to the root window.
        Notice that the "root" window is passed the second parameter in the 
        method header.
        Also notice that the first (and mandatory) parameter to all methods 
        is "self" i.e. a reference to the object instantiated from the class.
        """

        print("\nCreating Booking GUI ...")

        booking_frame = tk.Frame(root)
        booking_frame.pack()

        form_frame = tk.Frame(booking_frame)
        form_frame.pack()
    
        tk.Label(
            form_frame, 
            font=('arial', 10), 
            text = "Booking").grid(row=0, column=0, columnspan=3)

        # row 1: booking_id label, booking_id entry and list_of_ids label
        tk.Label(
            form_frame, 
            text= "Booking Id", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=1, column=0)
        # Need to use both padx and pady to leave a vertical space between rows of labels
        # And a space between the  label and its entry field
        # Entry has no padding options
        # Use the width= option to specify how wide in terms of number of characters
        tk.Entry(
            form_frame, 
            textvariable=self.booking_id, 
            width=30, 
            bd=1, 
            state=tk.DISABLED).grid(row=1, column=1)
        # booking_id is disabled to prevent user from entering a value
        # booking_id is generated by the database because AUTOINCREMENT 
        # was specified in the database schema
        tk.Label(
            form_frame, 
            text= "Booking IDs", 
            font=('arial', 10)).grid(row=1, column=2)
        
        # ***search by lastname
        tk.Label(
            form_frame, 
            text= "Search by Customer ID", 
            font=('arial', 10)).grid(row=7, column=2)
        self.search_booking = tk.Entry(form_frame)
        self.search_booking.grid(row=8, column=2)


        # row 6: check_in label and entry (the listbox will go through)
        tk.Label(
            form_frame, 
            text= "Check In", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=6, column=0)
        tk.Entry(
            form_frame, 
            textvariable=self.check_in, 
            width=30, 
            bd=1).grid(row=6, column=1)

        # row 7: check_out label, check_out entry and listbox of ids
        tk.Label(
            form_frame, 
            text= "Check Out", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=7, column=0)
        tk.Entry(
            form_frame, 
            textvariable=self.check_out, 
            width=30, 
            bd=1).grid(row=7, column=1)
        # Use the height= option to specify the height, default is 10
        # Use the width= option to specify the number of characters, default is 20
        self.lb_ids = tk.Listbox(form_frame)
        self.lb_ids.grid(row=2, column=2, rowspan=5) 
        # 'self' means instance attribute rather than local variable
        # since python allows using variables before they are declared
        # it does not matter whether lb_ids has been declared or not at the 
        # top of the file before the methods definition
        # Set the method to be called when an item is clicked on the listbox 
        self.lb_ids.bind('<<ListboxSelect>>', self.on_list_select)

        # row 11: extra_bed label and entry (the listbox will go through)
        tk.Label(
            form_frame, 
            text= "Extra bed", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=11, column=0)
            
        tk.Checkbutton(
            form_frame, 
            variable=self.extra_bed, 
            width=30, 
            text="add",
            bd=1).grid(row=11, column=1)

        # row 8: adult_num label and entry (the listbox will go through)
        tk.Label(
            form_frame, 
            text= "Adult counts", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=8, column=0)
        tk.Entry(
            form_frame, 
            textvariable=self.adult_num, 
            width=30, 
            bd=1).grid(row=8, column=1)

        # row 9: child_num label and entry (the listbox will go through)
        tk.Label(
            form_frame, 
            text= "Children counts", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=9, column=0)
        tk.Entry(
            form_frame, 
            textvariable=self.child_num, 
            width=30, 
            bd=1).grid(row=9, column=1)

        # row 10: child_num label and entry (the listbox will go through)
        tk.Label(
            form_frame, 
            text= "Infant counts", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=10, column=0)
        tk.Entry(
            form_frame, 
            textvariable=self.infant_num, 
            width=30, 
            bd=1).grid(row=10, column=1)

        # row 13: total_price label and entry (the listbox will go through)
        tk.Label(
            form_frame, 
            text= "Total Price", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=13, column=0)
        tk.Entry(
            form_frame, 
            textvariable=self.total_price, 
            width=30, 
            bd=1).grid(row=13, column=1)


        # row 12: booking_dtm label and entry (the listbox will go through)
        tk.Label(
            form_frame, 
            text= "Booked date & time", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=12, column=0)
        tk.Entry(
            form_frame, 
            textvariable=self.booking_dtm, 
            width=30, 
            state=tk.DISABLED,
            bd=1).grid(row=12, column=1)

        # row 3: room_id label and entry (the listbox will go through)
        tk.Label(
            form_frame, 
            text= "Room ID", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=3, column=0)

        # create a combobox
        selected_item = tk.StringVar()
        item_cb = ttk.Combobox(form_frame, width=28,textvariable=self.room_id)
        item_cb['state'] = 'readonly'

        retrieved_df = self.booking_dao.retrieve_data('room')
        item_cb['values'] = [tpl[0] for tpl in retrieved_df]

        # place the widget
        item_cb.grid(row=3, column=1)

        # bind the selected value changes
        def item_changed(event):
            """ handle the month changed event """
            selected_item = self.room_id
            showinfo(
                title='Result',
                message=f'You selected {selected_item.get()}!'
            )

        item_cb.bind('<<ComboboxSelected>>', item_changed)

        # row 4: staff_id label and entry (the listbox will go through)
        tk.Label(
            form_frame, 
            text= "Staff ID", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=4, column=0)
        # create a combobox
        selected_item = tk.StringVar()
        item_cb = ttk.Combobox(form_frame, width=28,textvariable=self.staff_id)
        item_cb['state'] = 'readonly'

        retrieved_df = self.booking_dao.retrieve_data('staff')
        item_cb['values'] = [tpl[0] for tpl in retrieved_df]

        # place the widget
        item_cb.grid(row=4, column=1)

        # bind the selected value changes
        def item_changed(event):
            """ handle the month changed event """
            selected_item = self.staff_id
            showinfo(
                title='Result',
                message=f'You selected {selected_item.get()}!'
            )

        item_cb.bind('<<ComboboxSelected>>', item_changed)

        # row 2: customer_id label and entry (the listbox will go through)
        tk.Label(
            form_frame, 
            text= "Customer ID", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=2, column=0)

        # create a combobox
        selected_item = tk.StringVar()
        item_cb = ttk.Combobox(form_frame, width=28,textvariable=self.customer_id)
        item_cb['state'] = 'readonly'

        retrieved_df = self.booking_dao.retrieve_data('customer')

        item_cb['values'] = [tpl[0] for tpl in retrieved_df]

        # place the widget
        item_cb.grid(row=2, column=1)

        # bind the selected value changes
        def item_changed(event):
            """ handle the month changed event """
            selected_item = self.customer_id
            showinfo(
                title='Result',
                message=f'You selected {selected_item.get()}!'
            )

        item_cb.bind('<<ComboboxSelected>>', item_changed)

        # row 5: Phone label and entry (the listbox will go through)
        tk.Label(
            form_frame, 
            text= "Phone", 
            font=('arial', 10), 
            width=20, 
            anchor="e", 
            bd=1, 
            pady=10, 
            padx=10).grid(row=5, column=0)
        tk.Entry(
            form_frame, 
            textvariable=self.phone_num, 
            width=30, 
            bd=1).grid(row=5, column=1)


        # Buttons
        # There are 3 columns of widgets in the frame and 4 buttons
        # Better insert the button in another frame
        # Also easier to pack them from the left than using a grid with row 
        # and col locations
        # pady to leave a space from frame on top
        button_frame = tk.LabelFrame(booking_frame, pady=10, text="Commands") 
        button_frame.pack()
        # Use the anchor= option to position the button
        # External padding around buttons: padx= pady=  default is 0
        # Use the width= option to specify the number of characters, 
        # otherwise calculated based on text width
        tk.Button(
            button_frame, 
            width=10, text="Price", 
            command=self.get_total_price).pack(side=tk.LEFT)
        tk.Button(
            button_frame, 
            width=10, text="Clear", 
            command=self.clear_fields).pack(side=tk.LEFT)
        tk.Button(
            button_frame, 
            width=10, 
            text="Save", 
            command=self.save).pack(side=tk.LEFT)
        tk.Button(
            button_frame, 
            width=10, 
            text="Delete", 
            command=self.confirm_delete).pack(side=tk.LEFT)
        tk.Button(
            button_frame, 
            width=10, 
            text="Load", 
            command=self.load).pack(side=tk.LEFT)       
        tk.Button(
            button_frame, 
            width=10, 
            text="Search", 
            command=self.filter_by_customer_id).pack(side=tk.LEFT) 
        # Return a reference to the high level frame created
        # Will need the reference to be able to destroy it in the calling function
        return booking_frame

    def get_total_price(self):
        """
        Calculate total price of booking

        Parameters: None

        Return: Total price
        """

        room_id = self.room_id.get()
        extra_bed = self.extra_bed.get()

        check_in = datetime.strptime(self.check_in.get(), "%d/%m/%Y") # transform date in python format
        check_out = datetime.strptime(self.check_out.get(), "%d/%m/%Y")
        stay = (check_out-check_in).days

        room_price = self.booking_dao.get_room_price(room_id)[1]
        total_price = (room_price + extra_bed * 80) * stay
        self.total_price.set(total_price)

    def confirm_delete(self):
        """
        Show confirmation popup before executing delete. 

        Parameters: None

        Return: None
        """
        answer = askyesno(title='confirmation',
                        message=f'Are you sure that you want to delete?')
        if answer:
            self.delete()
    
    def clear_fields(self):
        """Clear the fields of the form"""

        print("\nClearing fields ...")

        # Just blank all the fields
        self.booking_id.set("")
        self.check_in.set("")
        self.check_out.set("")
        self.extra_bed.set("")
        self.adult_num.set("")
        self.child_num.set("")
        self.infant_num.set("")
        self.total_price.set("")
        self.booking_dtm.set("")
        self.room_id.set("")
        self.customer_id.set("")
        self.phone_num.set("")

    def save(self):
        """Save the data displayed on the form to the database."""


        print("\nSaving a booking ...")

        # Get the data
        data = self.get_fields()   

        # Validate the data
        valid_data, message = self.validate_fields(data)
        if valid_data:
            if (len(data['booking_id'])==0):
                # If nothing has been entered in booking_id 
                # i.e. its length is zero characters
                print("Calling create() as booking_id is absent")
                self.create(data)
            else:
                print("Calling update() as booking_id is present")
                self.update(data)
                pass
        else:
            message_text = "Invalid fields.\n" + message 
            messagebox.showwarning(self.mb_title_bar, message_text, icon="warning")
            pass

        self.load()

    def get_fields(self):
        """Get the data entered in the fields of the form"""

        print("\nGetting fields ...")

        booking = {}
        # booking_id is ignored when creating a record
        booking['booking_id'] = self.booking_id.get() 
        booking['room_id'] = self.room_id.get() 
        booking['check_in'] = self.check_in.get()
        booking['check_out'] = self.check_out.get()
        booking['extra_bed'] = self.extra_bed.get()
        booking['adult_num'] = self.adult_num.get()
        booking['child_num'] = self.child_num.get()
        booking['infant_num'] = self.infant_num.get()
        booking['total_price'] = self.total_price.get()
        booking['booking_dtm'] = self.booking_dtm.get()
        booking['room_id'] = self.room_id.get()
        booking['staff_id'] = self.staff_id.get()
        booking['customer_id'] = self.customer_id.get()
        booking['phone_num'] = self.phone_num.get()

        print(f"booking: {booking}")
 
        return booking    

    def create(self, data):
        """Create a new record in the database"""

        print("\nCreating a booking ...")
        print(f"data: {data}")

        result = self.booking_dao.create(data)

        # Display the returned message to the user - use a messagebox
        # Format: message.function(title, message [, options])
        # Functions: showinfo, showwarning, showerror, askquestion, 
        #            askokcancel, askyesno, or askretrycancel
        # Use the icon= option to specify which icon to display 
        # e.g. icon="warning", "error", "info", "question"     
        # Display everything that is returned in the result
        messagebox.showinfo(self.mb_title_bar, result)
        self.load()
 
    def update(self, data):
        """Update a record in the database"""

        print("\nUpdating a booking ...")
        print(f"data: {data}")

        result = self.booking_dao.update(data['booking_id'], data)

        # Display the returned message to the user - use a messagebox  
        # Display everything that is returned in the result      
        messagebox.showinfo(self.mb_title_bar, result)
        self.load()

    def delete(self):
        """Delete a record from the database"""

        print("\nDeleting  a booking ...")
        
        # Grab the booking_id from the stringvar
        id = self.booking_id.get() 
        print(f"id: {id}")
        
        # Call the data access object to do the job
        # Pass the id as parameter to the delete() method
        result = self.booking_dao.delete(id)   

        # Display the returned message to the user - use a messagebox    
        # Display everything that is returned in the result    
        messagebox.showinfo(self.mb_title_bar, result)
        self.load()

    def load(self):
        """Retrieve a list of IDs from the database and load them into a listbox"""

        print("\nLoading IDs in list box ...")

        result = self.booking_dao.find_ids()
        print(f"result: {result}")

        # Check if there is an entry in the result dictionary
        if "booking_ids" in result: 
            list_ids = result['booking_ids'] # will crash if there is no entry!
            # Set the returned list into the listbox
            # Before doing that, must clear any previous list in the box
            self.lb_ids.delete(0,tk.END)
            print("Setting booking_ids in listbox ...")
            for x in list_ids:
                self.lb_ids.insert(tk.END, x)
                #print(x)
            pass

    def filter_by_customer_id(self):
        """Retrieve a list of filtered IDs from the database and load them into a listbox"""

        print("\nLoading filtered IDs in list box ...")

        booking_id = self.search_booking.get()
        result = self.booking_dao.find_by_customer_id(booking_id)

        if "filtered_booking_ids" in result: 
            list_ids = result['filtered_booking_ids'] # will crash if there is no entry!
            # Set the returned list into the listbox
            # Before doing that, must clear any previous list in the box
            self.lb_ids.delete(0,tk.END)
            print("Setting filtered_booking_ids in listbox ...")
            for x in list_ids:
                self.lb_ids.insert(tk.END, x)
                #print(x)
            pass

    def on_list_select(self, evt):
        """on_list_select() is triggered when a user clicks an item in the listbox"""

        print("\nSelecting an item from the list box ...")

        w = evt.widget

        # index = position of the item clicked in the list, first item is item 0 not 1
        index = int(w.curselection()[0]) 
          
         # value of the item clicked, in our case it's the booking_id  
        value = w.get(index) 
         
        print(f"index: {index}") 
        print(f"value: {value}")

        # Call find_by_id and populate the stringvars of the form
        result = self.booking_dao.find_by_id(value)

        # { "booking" : {"booking_dao": "", "first_name": "", etc}}
        print(f"result: {result}") 

        # Grab booking dict from result dict and use it to populate the fields on the form  
        booking = result['booking']
        self.populate_fields(booking)

    def populate_fields(self, booking):
        """Populate the fields of the form with data"""

        print("\nPopulating fields ...")
        print(f"booking: {booking}")

        # Set the values from the dict to the stringvars
        self.booking_id.set(booking['booking_id'])
        self.check_in.set(booking['check_in'])
        self.check_out.set(booking['check_out'])
        self.extra_bed.set(booking['extra_bed'])
        self.adult_num.set(booking['adult_num'])
        self.child_num.set(booking['child_num'])
        self.infant_num.set(booking['infant_num'])
        self.total_price.set(booking['total_price'])
        self.booking_dtm.set(booking['booking_dtm'])
        self.room_id.set(booking['room_id'])
        self.staff_id.set(booking['staff_id'])
        self.customer_id.set(booking['customer_id'])
        self.phone_num.set(booking['phone_num'])

    def validate_fields(self, data):
        """Validate the data entered in the fields of the form"""

        print("\nValidating the data ...")
        print(f"data: {data}")
           
        # By default set to true, anything wrong will turn it to false   
        valid_data = True 
        # Instantiate an empty list to contain the messages
        message_list = [] 
        
        # Check for blank fields
        # Do not check doc_id as this is generated by the database
        # Do not check extra_bed as it is optional to request extra bed
        # Do not check booking_dtm as it is auto-generated by the database
        if not str(data['check_in']):
            valid_data = False
            message_list.append("check in is empty")
        if not str(data['check_out']):
            valid_data = False
            message_list.append("check out is empty")
        if not str(data['adult_num']):
            valid_data = False
            message_list.append("adult number is empty")
        if not str(data['child_num']):
            valid_data = False
            message_list.append("childrent number is empty")
        if not str(data['infant_num']):
            valid_data = False
            message_list.append("infant number is empty")
        if not str(data['total_price']):
            valid_data = False
            message_list.append("total number is empty")
        if not str(data['room_id']):
            valid_data = False
            message_list.append("Room id is empty")
        if not str(data['staff_id']):
            valid_data = False
            message_list.append("Staff id is empty")
        if not str(data['customer_id']):
            valid_data = False
            message_list.append("Customer id is empty")
        if not str(data['phone_num']):
            valid_data = False
            message_list.append("Phone number is empty")

        # Other possible checks

        # Implement these as functions in the Validation class so that 
        # other classes can call them

        # Check if check_in and check_out follows a certain pattern 
        if not self.validator.is_date(data['check_in']):
            valid_data = False
            message_list.append("invalid date format")

        if not self.validator.is_date(data['check_out']):
            valid_data = False
            message_list.append("invalid date format")

        # check if adult_num, child_num, infant_num, total_price, room_id, staff_id, customer_id is numeric
        if not self.validator.is_numeric(data['adult_num']):
            valid_data = False
            message_list.append("invalid adult number")

        if not self.validator.is_numeric(data['child_num']):
            valid_data = False
            message_list.append("invalid child number")

        if not self.validator.is_numeric(data['infant_num']):
            valid_data = False
            message_list.append("invalid infant number")

        if not self.validator.is_numeric(data['total_price']):
            valid_data = False
            message_list.append("invalid total price")

        if not self.validator.is_numeric(data['room_id']):
            valid_data = False
            message_list.append("invalid room id")

        if not self.validator.is_numeric(data['staff_id']):
            valid_data = False
            message_list.append("invalid staff id")

        if not self.validator.is_numeric(data['customer_id']):
            valid_data = False
            message_list.append("invalid customer id")

        # Check if work_phone follows a certain pattern. Australia standard: 04xx xxx xxx or 04xx-xxx-xxx
        if not self.validator.is_phone_number(data['phone_num']):
            valid_data = False
            message_list.append("invalid phone number format")
                   
        # Join the items in the list as a string separated with a comma and a space    
        message = ', '.join(message_list) 

        return valid_data, message # return 2 values

# ###########
# Main method
# ###########

if __name__ == '__main__':
    """The main method is only executed when the file is 'run' (not imported in another file)"""
     
    # Setup a root window (in the middle of the screen)
    root = tk.Tk()
    root.title("Booking System")
    screen_width = root.winfo_screenwidth()
    screen_height = root.winfo_screenheight()
    width = 900
    height = 600
    x = (screen_width/2) - (width/2)
    y = (screen_height/2) - (height/2)
    root.geometry('%dx%d+%d+%d' % (width, height, x, y))
    root.resizable(0, 0)

    # Instantiate the gui
    gui = BookingGUI()

    # Create the gui
    # pass the root window as parameter
    gui.create_gui(root)
    gui.load()
    # Run the mainloop 
    # the endless window loop to process user inputs
    root.mainloop()
    pass